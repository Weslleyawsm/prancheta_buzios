import mysql.connector
from datetime import datetime, time, timedelta


class DatabaseManager:
    def __init__(self):
        self.config = {
            'host': 'prancheta-db.cgz4mmcgy3ns.us-east-1.rds.amazonaws.com',
            'user': 'admin',
            'password': 'awsm1944',
            'database': 'prancheta_db',
        }
        self.fiscal_atual = None
        self.data_atual = None
        self.linha_atual = None  # Sempre ser√° None agora
        self.intervalo_atual = 8  # Intervalo padr√£o em minutos (MANTIDO para compatibilidade)

        # üÜï NOVO: Intervalos espec√≠ficos por linha
        self.intervalos_por_linha = {
            'Centro x Vila Verde': 8,  # Padr√£o 8 minutos
            'Centro x Rasa': 8  # Padr√£o 8 minutos
        }

    def connect(self):
        return mysql.connector.connect(**self.config)

    def cabecalho_prancheta(self, nome_fiscal, data_atual):
        """Cabe√ßalho simplificado - apenas fiscal e data"""
        self.fiscal_atual = nome_fiscal
        self.data_atual = data_atual
        self.linha_atual = None  # Linha ser√° definida por carro

        print(f"Cabe√ßalho definido: {self.fiscal_atual} - {self.data_atual}")

    # üÜï NOVAS FUN√á√ïES: Gest√£o de Intervalos por Linha

    def obter_intervalo_linha(self, nome_linha):
        """Retorna o intervalo espec√≠fico de uma linha"""
        return self.intervalos_por_linha.get(nome_linha, 8)  # Default 8 min

    def definir_intervalo_linha(self, nome_linha, novo_intervalo):
        """Define intervalo espec√≠fico para uma linha"""
        try:
            if not isinstance(novo_intervalo, int) or novo_intervalo < 1 or novo_intervalo > 60:
                return {'status': 'erro', 'mensagem': 'Intervalo deve ser entre 1 e 60 minutos'}

            if nome_linha not in self.intervalos_por_linha:
                return {'status': 'erro', 'mensagem': f'Linha "{nome_linha}" n√£o reconhecida'}

            print(f"üîß Definindo intervalo para {nome_linha}: {novo_intervalo} minutos")

            # Salvar intervalo antigo para log
            intervalo_antigo = self.intervalos_por_linha[nome_linha]
            self.intervalos_por_linha[nome_linha] = novo_intervalo

            # Recalcular hor√°rios dos carros pendentes DESTA linha espec√≠fica
            carros_atualizados = self.recalcular_horarios_linha_especifica(nome_linha)

            return {
                'status': 'sucesso',
                'linha': nome_linha,
                'intervalo_antigo': intervalo_antigo,
                'intervalo_novo': novo_intervalo,
                'carros_atualizados': carros_atualizados,
                'mensagem': f'Intervalo da linha "{nome_linha}" alterado para {novo_intervalo} minutos. {carros_atualizados} carros atualizados.'
            }

        except Exception as e:
            print(f"‚ùå Erro ao definir intervalo da linha: {str(e)}")
            return {'status': 'erro', 'mensagem': f'Erro: {str(e)}'}

    def calcular_proximo_horario_linha(self, nome_linha):
        """Calcula pr√≥ximo hor√°rio baseado no √öLTIMO carro DA LINHA ESPEC√çFICA com l√≥gica inteligente"""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            print(f"üîç Calculando pr√≥ximo hor√°rio para linha: {nome_linha}")
            print(f"üîç Fiscal: {self.fiscal_atual}, Data: {self.data_atual}")

            # üéØ PASSO 1: Verificar se h√° carros AGUARDANDO na linha
            sql_aguardando = """SELECT horario_saida FROM saida_carros 
                               WHERE nome_fiscal = %s AND data_trabalho = %s AND linha = %s
                               AND saida_confirmada = FALSE
                               ORDER BY horario_saida DESC 
                               LIMIT 1"""

            valores = (self.fiscal_atual, self.data_atual, nome_linha)
            cursor.execute(sql_aguardando, valores)
            ultimo_aguardando = cursor.fetchone()

            print(f"üîç √öltimo carro AGUARDANDO da linha {nome_linha}: {ultimo_aguardando}")

            # Se h√° carro aguardando, usar ele + intervalo
            if ultimo_aguardando and ultimo_aguardando[0]:
                ultimo_horario = ultimo_aguardando[0]

                # Converter timedelta para time se necess√°rio
                if isinstance(ultimo_horario, timedelta):
                    total_seconds = int(ultimo_horario.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    ultimo_horario = time(hours, minutes, 0)
                    print(f"üîß Convertido timedelta para time: {ultimo_horario}")

                if isinstance(ultimo_horario, time):
                    ultimo_datetime = datetime.combine(datetime.now().date(), ultimo_horario)
                    intervalo_linha = self.obter_intervalo_linha(nome_linha)
                    proximo_datetime = ultimo_datetime + timedelta(minutes=intervalo_linha)
                    proximo_horario = proximo_datetime.time().replace(second=0, microsecond=0)
                    print(
                        f"‚è∞ {nome_linha}: √öltimo aguardando ({ultimo_horario}) + {intervalo_linha}min = {proximo_horario}")
                    cursor.close()
                    conexao.close()
                    return proximo_horario

            # üéØ PASSO 2: Se N√ÉO h√° carros aguardando, verificar √∫ltimo CONFIRMADO
            sql_confirmado = """SELECT horario_saida FROM saida_carros 
                               WHERE nome_fiscal = %s AND data_trabalho = %s AND linha = %s
                               AND saida_confirmada = TRUE
                               ORDER BY horario_saida DESC 
                               LIMIT 1"""

            cursor.execute(sql_confirmado, valores)
            ultimo_confirmado = cursor.fetchone()

            print(f"üîç √öltimo carro CONFIRMADO da linha {nome_linha}: {ultimo_confirmado}")

            agora = datetime.now()
            intervalo_linha = self.obter_intervalo_linha(nome_linha)
            print(f"üîç Intervalo da linha {nome_linha}: {intervalo_linha} minutos")
            print(f"üîç Hor√°rio atual: {agora.strftime('%H:%M:%S')}")

            if ultimo_confirmado and ultimo_confirmado[0]:
                ultimo_horario = ultimo_confirmado[0]

                # Converter timedelta para time se necess√°rio
                if isinstance(ultimo_horario, timedelta):
                    total_seconds = int(ultimo_horario.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    ultimo_horario = time(hours, minutes, 0)
                    print(f"üîß Convertido timedelta para time: {ultimo_horario}")

                if isinstance(ultimo_horario, time):
                    ultimo_datetime = datetime.combine(datetime.now().date(), ultimo_horario)
                    horario_esperado_datetime = ultimo_datetime + timedelta(minutes=intervalo_linha)
                    horario_esperado = horario_esperado_datetime.time()

                    print(f"üîç √öltimo confirmado: {ultimo_horario}")
                    print(f"üîç Hor√°rio esperado seria: {horario_esperado}")

                    # üéØ REGRA INTELIGENTE: Se passou do tempo, usar agora + intervalo
                    if agora.time() > horario_esperado:
                        print(f"‚ö° CARRO ATRASADO! Passou do hor√°rio esperado ({horario_esperado})")
                        print(f"‚ö° Usando hor√°rio atual + {intervalo_linha} minutos")
                        proximo_datetime = agora + timedelta(minutes=intervalo_linha)
                        proximo_horario = proximo_datetime.time().replace(second=0, microsecond=0)
                        print(f"‚è∞ Novo hor√°rio calculado: {proximo_horario}")
                        cursor.close()
                        conexao.close()
                        return proximo_horario
                    else:
                        print(f"‚úÖ Dentro do prazo, usando hor√°rio esperado: {horario_esperado}")
                        cursor.close()
                        conexao.close()
                        return horario_esperado.replace(second=0, microsecond=0)

            # üéØ PASSO 3: Primeiro carro da linha - usar hor√°rio atual + 10 minutos
            proximo_datetime = agora + timedelta(minutes=10)
            proximo_horario = proximo_datetime.time().replace(second=0, microsecond=0)
            print(f"‚è∞ PRIMEIRO carro da linha {nome_linha}: {proximo_horario} (agora + 10 minutos)")

            cursor.close()
            conexao.close()
            return proximo_horario

        except Exception as e:
            print(f"‚ùå Erro ao calcular pr√≥ximo hor√°rio da linha: {e}")
            agora = datetime.now()
            return (agora + timedelta(minutes=10)).time().replace(second=0, microsecond=0)

    def recalcular_horarios_linha_especifica(self, nome_linha):
        """Recalcula hor√°rios apenas dos carros pendentes DE UMA LINHA ESPEC√çFICA usando L√ìGICA INTELIGENTE"""
        try:
            if not self.fiscal_atual or not self.data_atual:
                print("‚ùå Cabe√ßalho n√£o definido, n√£o √© poss√≠vel recalcular")
                return 0

            conexao = self.connect()
            cursor = conexao.cursor()

            # Buscar carros PENDENTES DA LINHA ESPEC√çFICA
            sql_pendentes = """SELECT id, numero_carro, horario_saida FROM saida_carros 
                              WHERE nome_fiscal = %s AND data_trabalho = %s 
                              AND linha = %s AND saida_confirmada = FALSE
                              ORDER BY horario_saida ASC"""

            valores = (self.fiscal_atual, self.data_atual, nome_linha)
            cursor.execute(sql_pendentes, valores)
            carros_pendentes = cursor.fetchall()

            print(f"üîç Carros PENDENTES da linha {nome_linha}: {len(carros_pendentes)}")

            if not carros_pendentes:
                print(f"‚úÖ Nenhum carro pendente da linha {nome_linha} para recalcular")
                cursor.close()
                conexao.close()
                return 0

            # üÜï L√ìGICA INTELIGENTE: Usar a mesma l√≥gica do calcular_proximo_horario_linha
            agora = datetime.now()
            intervalo_linha = self.obter_intervalo_linha(nome_linha)

            # Verificar √∫ltimo carro CONFIRMADO da linha
            sql_confirmado = """SELECT horario_saida FROM saida_carros 
                               WHERE nome_fiscal = %s AND data_trabalho = %s AND linha = %s
                               AND saida_confirmada = TRUE
                               ORDER BY horario_saida DESC 
                               LIMIT 1"""

            cursor.execute(sql_confirmado, valores)
            ultimo_confirmado = cursor.fetchone()

            print(f"üîç √öltimo carro CONFIRMADO da linha {nome_linha}: {ultimo_confirmado}")
            print(f"üîç Hor√°rio atual: {agora.strftime('%H:%M:%S')}")
            print(f"üîç Intervalo da linha {nome_linha}: {intervalo_linha} minutos")

            # Determinar hor√°rio base INTELIGENTE
            if ultimo_confirmado and ultimo_confirmado[0]:
                ultimo_horario = ultimo_confirmado[0]

                # Converter timedelta para time se necess√°rio
                if isinstance(ultimo_horario, timedelta):
                    total_seconds = int(ultimo_horario.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    ultimo_horario = time(hours, minutes, 0)

                if isinstance(ultimo_horario, time):
                    ultimo_datetime = datetime.combine(datetime.now().date(), ultimo_horario)
                    horario_esperado_datetime = ultimo_datetime + timedelta(minutes=intervalo_linha)
                    horario_esperado = horario_esperado_datetime.time()

                    print(f"üîç √öltimo confirmado: {ultimo_horario}")
                    print(f"üîç Hor√°rio esperado seria: {horario_esperado}")

                    # üéØ REGRA INTELIGENTE: Se passou do tempo, usar agora + intervalo
                    if agora.time() > horario_esperado:
                        print(f"‚ö° CARRO ATRASADO! Passou do hor√°rio esperado ({horario_esperado})")
                        print(f"‚ö° Usando hor√°rio atual + {intervalo_linha} minutos para BASE")
                        horario_base_datetime = agora + timedelta(minutes=intervalo_linha)
                    else:
                        print(f"‚úÖ Dentro do prazo, usando hor√°rio esperado como BASE: {horario_esperado}")
                        horario_base_datetime = horario_esperado_datetime
            else:
                # Primeiro da linha - usar hor√°rio atual + 10 minutos
                print(f"‚è∞ PRIMEIRO carro da linha {nome_linha} - usando agora + 10 min como BASE")
                horario_base_datetime = agora + timedelta(minutes=10)

            horario_base_datetime = horario_base_datetime.replace(second=0, microsecond=0)
            print(f"‚è∞ BASE FINAL para rec√°lculo da linha {nome_linha}: {horario_base_datetime.strftime('%H:%M:%S')}")

            carros_atualizados = 0

            # Recalcular carros pendentes baseado na BASE INTELIGENTE
            for i, (id_carro, numero_carro, horario_antigo) in enumerate(carros_pendentes):
                # Calcular novo hor√°rio
                novo_horario_datetime = horario_base_datetime + timedelta(minutes=i * intervalo_linha)
                novo_horario_datetime = novo_horario_datetime.replace(second=0, microsecond=0)
                novo_horario_time = novo_horario_datetime.time()

                print(
                    f"üîß Linha {nome_linha} - Atualizando ID {id_carro} (Carro {numero_carro}): {horario_antigo} ‚Üí {novo_horario_time}")

                # Atualizar hor√°rio
                sql_update = """UPDATE saida_carros 
                               SET horario_saida = %s 
                               WHERE id = %s"""

                cursor.execute(sql_update, (novo_horario_time, id_carro))

                if cursor.rowcount == 1:
                    carros_atualizados += 1
                    print(f"‚úÖ ID {id_carro} atualizado com sucesso")

            # Commit das altera√ß√µes
            conexao.commit()
            print(f"üíæ Linha {nome_linha}: {carros_atualizados} carros atualizados com L√ìGICA INTELIGENTE")

            cursor.close()
            conexao.close()

            return carros_atualizados

        except Exception as e:
            print(f"‚ùå ERRO ao recalcular hor√°rios da linha {nome_linha}: {str(e)}")
            try:
                conexao.rollback()
                cursor.close()
                conexao.close()
            except:
                pass
            return 0

    # üîÑ FUN√á√ÉO MODIFICADA: inserir_dados_motorista agora usa hor√°rio por linha
    def inserir_dados_motorista(self, numero_carro, nome_motorista, linha_carro, horario_saida=None):
        """
        Insere carro com hor√°rio autom√°tico POR LINHA se n√£o fornecido
        """
        if not self.fiscal_atual or not self.data_atual:
            print(f"‚ùå Defina o cabe√ßalho (fiscal e data) antes de prosseguir!")
            return False

        try:
            # Se hor√°rio n√£o fornecido, calcular por linha espec√≠fica
            if horario_saida is None:
                horario_saida = self.calcular_proximo_horario_linha(linha_carro)
                print(f"üïê Hor√°rio calculado para linha {linha_carro}: {horario_saida}")

            # Garantir que hor√°rio sempre tenha segundos = 00
            if isinstance(horario_saida, str):
                horario_obj = datetime.strptime(horario_saida, '%H:%M').time()
            else:
                horario_obj = horario_saida

            horario_final = horario_obj.replace(second=0, microsecond=0)
            print(f"üïê Hor√°rio final: {horario_final} (segundos zerados)")

            conexao = self.connect()
            cursor = conexao.cursor()

            # Inserir carro (saida_confirmada = FALSE por padr√£o)
            sql = """INSERT INTO saida_carros
            (nome_fiscal, data_trabalho, linha, numero_carro, nome_motorista, horario_saida, saida_confirmada)
            VALUES (%s, %s, %s, %s, %s, %s, FALSE)"""

            valores = (self.fiscal_atual, self.data_atual, linha_carro, numero_carro, nome_motorista, horario_final)

            cursor.execute(sql, valores)
            conexao.commit()

            cursor.close()
            conexao.close()

            print(f"‚úÖ Salvo: {numero_carro} - {nome_motorista} - {linha_carro} - {horario_final} (AGUARDANDO)")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao inserir dados: {str(e)}")
            return False

    # üÜï NOVA FUN√á√ÉO: Listar carros separados por linha
    def listar_carros_por_linha(self):
        """Lista carros da sess√£o atual SEPARADOS por linha"""
        if not self.fiscal_atual or not self.data_atual:
            print("‚ùå Cabe√ßalho n√£o definido!")
            return {}

        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            sql = """SELECT * FROM saida_carros 
                     WHERE nome_fiscal = %s AND data_trabalho = %s
                     ORDER BY linha ASC, horario_saida ASC"""
            valores = (self.fiscal_atual, self.data_atual)

            cursor.execute(sql, valores)
            todos_registros = cursor.fetchall()

            cursor.close()
            conexao.close()

            # Separar por linha
            carros_por_linha = {}

            for registro in todos_registros:
                linha = registro[3]  # linha est√° na posi√ß√£o 3

                if linha not in carros_por_linha:
                    carros_por_linha[linha] = []

                carros_por_linha[linha].append(registro)

            print(f"üìä Carros separados por linha:")
            for linha, carros in carros_por_linha.items():
                print(f"  {linha}: {len(carros)} carros")

            return carros_por_linha

        except Exception as e:
            print(f"‚ùå Erro ao listar carros por linha: {str(e)}")
            return {}

    # ========== MANTER TODAS AS FUN√á√ïES ORIGINAIS INTACTAS ==========

    def calcular_proximo_horario(self):
        """
        FUN√á√ÉO ORIGINAL MANTIDA: Calcula pr√≥ximo hor√°rio baseado no √öLTIMO carro (independente de confirma√ß√£o)
        """
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            print(f"üîç Calculando pr√≥ximo hor√°rio...")
            print(f"üîç Fiscal: {self.fiscal_atual}, Data: {self.data_atual}")

            # CORRE√á√ÉO CR√çTICA: Buscar √öLTIMO carro da sess√£o (confirmado ou n√£o)
            sql = """SELECT horario_saida FROM saida_carros 
                     WHERE nome_fiscal = %s AND data_trabalho = %s 
                     ORDER BY horario_saida DESC 
                     LIMIT 1"""

            valores = (self.fiscal_atual, self.data_atual)
            cursor.execute(sql, valores)
            ultimo_carro = cursor.fetchone()

            # DEBUG: Ver todos os carros para entender
            sql_debug = """SELECT numero_carro, horario_saida FROM saida_carros 
                          WHERE nome_fiscal = %s AND data_trabalho = %s 
                          ORDER BY horario_saida DESC"""
            cursor.execute(sql_debug, valores)
            todos_carros = cursor.fetchall()

            print(f"üîç Carros na sess√£o:")
            for carro in todos_carros:
                print(f"    Carro {carro[0]} - {carro[1]}")

            cursor.close()
            conexao.close()

            if ultimo_carro and ultimo_carro[0]:
                # H√° carros - adicionar intervalo ao √∫ltimo
                ultimo_horario = ultimo_carro[0]

                # Converter timedelta para time se necess√°rio
                if isinstance(ultimo_horario, timedelta):
                    # Converter timedelta para time
                    total_seconds = int(ultimo_horario.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    ultimo_horario = time(hours, minutes, 0)
                    print(f"üîß Convertido timedelta para time: {ultimo_horario}")

                if isinstance(ultimo_horario, time):
                    ultimo_datetime = datetime.combine(datetime.now().date(), ultimo_horario)
                    proximo_datetime = ultimo_datetime + timedelta(minutes=self.intervalo_atual)
                    proximo_horario = proximo_datetime.time().replace(second=0, microsecond=0)
                    print(f"‚è∞ CORRETO: √öltimo ({ultimo_horario}) + {self.intervalo_atual}min = {proximo_horario}")
                    return proximo_horario
                else:
                    print(f"‚ùå Tipo inesperado de hor√°rio: {type(ultimo_horario)} - {ultimo_horario}")

            # Primeiro carro do dia - usar hor√°rio atual + 10 minutos
            agora = datetime.now()
            proximo_datetime = agora + timedelta(minutes=10)
            proximo_horario = proximo_datetime.time().replace(second=0, microsecond=0)
            print(f"‚è∞ PRIMEIRO carro do dia: {proximo_horario} (agora + 10 minutos)")
            return proximo_horario

        except Exception as e:
            print(f"‚ùå Erro ao calcular pr√≥ximo hor√°rio: {e}")
            agora = datetime.now()
            return (agora + timedelta(minutes=10)).time().replace(second=0, microsecond=0)

    def listar_registros(self):
        """Lista registros da sess√£o atual (compatibilidade)"""
        return self.listar_registros_sessao_atual()

    def listar_registros_sessao_atual(self):
        """Lista apenas registros da sess√£o atual (com cabe√ßalho definido) - COM STATUS DE CONFIRMA√á√ÉO"""
        if not self.fiscal_atual or not self.data_atual:
            print("‚ùå Cabe√ßalho n√£o definido!")
            return []

        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            sql = """SELECT * FROM saida_carros 
                     WHERE nome_fiscal = %s AND data_trabalho = %s
                     ORDER BY horario_saida ASC"""
            valores = (self.fiscal_atual, self.data_atual)

            cursor.execute(sql, valores)
            resultado = cursor.fetchall()

            cursor.close()
            conexao.close()

            print(f"Listando registros da sess√£o atual! Total: {len(resultado)}")
            return resultado

        except Exception as e:
            print(f"‚ùå Erro ao listar registros da sess√£o: {str(e)}")
            return []

    def listar_todos_registros(self):
        """Lista TODOS os registros sem filtro - COM STATUS DE CONFIRMA√á√ÉO"""
        conexao = self.connect()
        cursor = conexao.cursor()

        sql = "SELECT * FROM saida_carros ORDER BY id DESC"
        cursor.execute(sql)
        resultado = cursor.fetchall()

        cursor.close()
        conexao.close()

        print(f"Listando TODOS os registros! Total: {len(resultado)}")
        return resultado

    def deletar_registro(self, id_registro):
        """Remove um registro do banco de dados"""
        conexao = self.connect()
        cursor = conexao.cursor()

        sql = """SELECT * FROM saida_carros WHERE id = (%s)"""
        cursor.execute(sql, (id_registro,))
        registro = cursor.fetchone()
        if not registro:
            print(f"Registro com o ID {id_registro} n√£o encontrado!")
            cursor.close()
            conexao.close()
            return False

        sql = """DELETE FROM saida_carros WHERE id = %s"""
        cursor.execute(sql, (id_registro,))
        conexao.commit()

        cursor.close()
        conexao.close()
        print(f"Registro com id: {id_registro} deletado!")
        return True

    # ========== FUNCIONALIDADE: CONFIRMAR SA√çDA AUTOM√ÅTICA ==========

    def adicionar_coluna_saida_confirmada(self):
        """EXECUTE ESTA FUN√á√ÉO APENAS UMA VEZ para adicionar a nova coluna"""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            sql = """
            ALTER TABLE saida_carros 
            ADD COLUMN saida_confirmada BOOLEAN DEFAULT FALSE
            """

            cursor.execute(sql)
            conexao.commit()

            cursor.close()
            conexao.close()

            print("‚úÖ Coluna 'saida_confirmada' adicionada com sucesso!")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao adicionar coluna: {str(e)}")
            if "Duplicate column name" in str(e) or "duplicate column name" in str(e).lower():
                print("‚úÖ Coluna j√° existe, continuando...")
                return True
            return False

    def confirmar_saida_carro(self, id_carro):
        """Marca um carro como tendo sua sa√≠da confirmada AUTOMATICAMENTE"""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            sql = """
            UPDATE saida_carros 
            SET saida_confirmada = TRUE 
            WHERE id = %s
            """

            cursor.execute(sql, (id_carro,))
            conexao.commit()

            linhas_afetadas = cursor.rowcount
            cursor.close()
            conexao.close()

            if linhas_afetadas > 0:
                print(f"‚úÖ Sa√≠da confirmada AUTOMATICAMENTE para carro ID: {id_carro}")
                return True
            else:
                print(f"‚ùå Carro ID {id_carro} n√£o encontrado")
                return False

        except Exception as e:
            print(f"‚ùå Erro ao confirmar sa√≠da: {str(e)}")
            return False

    # ========== FUNCIONALIDADE ORIGINAL: CONTROLE DE INTERVALO ==========

    def definir_intervalo(self, novo_intervalo):
        """Define novo intervalo entre carros e recalcula hor√°rios dos carros pendentes"""
        try:
            if not isinstance(novo_intervalo, int) or novo_intervalo < 1 or novo_intervalo > 60:
                print("‚ùå Intervalo deve ser um n√∫mero entre 1 e 60 minutos")
                return {'status': 'erro', 'mensagem': 'Intervalo deve ser entre 1 e 60 minutos'}

            print(f"üîß Definindo novo intervalo: {novo_intervalo} minutos")
            self.intervalo_atual = novo_intervalo

            # Recalcular hor√°rios dos carros pendentes
            carros_atualizados = self.recalcular_horarios_carros_pendentes()

            return {
                'status': 'sucesso',
                'intervalo': novo_intervalo,
                'carros_atualizados': carros_atualizados,
                'mensagem': f'Intervalo alterado para {novo_intervalo} minutos. {carros_atualizados} carros atualizados.'
            }

        except Exception as e:
            print(f"‚ùå Erro ao definir intervalo: {str(e)}")
            return {'status': 'erro', 'mensagem': f'Erro ao definir intervalo: {str(e)}'}

    def recalcular_horarios_carros_pendentes(self):
        """
        FUN√á√ÉO ORIGINAL CORRIGIDA: Recalcula hor√°rios SEM DUPLICAR registros usando L√ìGICA INTELIGENTE
        """
        try:
            if not self.fiscal_atual or not self.data_atual:
                print("‚ùå Cabe√ßalho n√£o definido, n√£o √© poss√≠vel recalcular")
                return 0

            conexao = self.connect()
            cursor = conexao.cursor()

            # Buscar apenas carros PENDENTES para recalcular
            sql_pendentes = """SELECT id, numero_carro, horario_saida FROM saida_carros 
                              WHERE nome_fiscal = %s AND data_trabalho = %s 
                              AND saida_confirmada = FALSE
                              ORDER BY id ASC"""

            cursor.execute(sql_pendentes, (self.fiscal_atual, self.data_atual))
            carros_pendentes = cursor.fetchall()

            print(f"üîç Carros PENDENTES para recalcular (TODAS AS LINHAS): {len(carros_pendentes)}")

            if not carros_pendentes:
                print("‚úÖ Nenhum carro pendente para recalcular")
                cursor.close()
                conexao.close()
                return 0

            # üÜï L√ìGICA INTELIGENTE: Usar hor√°rio atual como base (n√£o carros antigos)
            agora = datetime.now()
            horario_base = agora + timedelta(minutes=10)  # Base: agora + 10 minutos
            horario_base = horario_base.replace(second=0, microsecond=0)

            print(f"‚è∞ BASE INTELIGENTE para rec√°lculo: {horario_base.strftime('%H:%M:%S')} (agora + 10 min)")
            print(f"‚è∞ INTERVALO GERAL: {self.intervalo_atual} minutos")

            carros_atualizados = 0

            for i, (id_carro, numero_carro, horario_antigo) in enumerate(carros_pendentes):
                # Calcular novo hor√°rio baseado na BASE INTELIGENTE
                novo_horario_datetime = horario_base + timedelta(minutes=i * self.intervalo_atual)
                novo_horario_datetime = novo_horario_datetime.replace(second=0, microsecond=0)
                novo_horario_time = novo_horario_datetime.time()

                print(f"üîß Atualizando ID {id_carro} (Carro {numero_carro}): {horario_antigo} ‚Üí {novo_horario_time}")

                # ATUALIZAR (n√£o inserir novo registro)
                sql_update = """UPDATE saida_carros 
                               SET horario_saida = %s 
                               WHERE id = %s"""

                cursor.execute(sql_update, (novo_horario_time, id_carro))

                # Verificar se a atualiza√ß√£o funcionou
                if cursor.rowcount == 1:
                    carros_atualizados += 1
                    print(f"‚úÖ ID {id_carro} atualizado com sucesso")
                else:
                    print(f"‚ùå Falha ao atualizar ID {id_carro} - Linhas afetadas: {cursor.rowcount}")

            # COMMIT apenas uma vez no final
            conexao.commit()
            print(f"üíæ Transa√ß√£o commitada - {carros_atualizados} carros atualizados com L√ìGICA INTELIGENTE")

            cursor.close()
            conexao.close()

            return carros_atualizados

        except Exception as e:
            print(f"‚ùå ERRO CR√çTICO ao recalcular hor√°rios: {str(e)}")
            # Em caso de erro, fazer rollback
            try:
                conexao.rollback()
                cursor.close()
                conexao.close()
            except:
                pass
            return 0

    # ========== SESS√ÉO E INFORMA√á√ïES ==========

    def obter_sessao_atual(self):
        """Retorna informa√ß√µes da sess√£o atual (sem linha fixa)."""
        if not self.fiscal_atual or not self.data_atual:
            return None

        try:
            registros = self.listar_registros_sessao_atual()

            # Contar linhas diferentes na sess√£o
            linhas_unicas = set()
            for registro in registros:
                if len(registro) > 3 and registro[3]:  # linha est√° na posi√ß√£o 3
                    linhas_unicas.add(registro[3])

            linhas_texto = f"{len(linhas_unicas)} linha(s)" if linhas_unicas else "Nenhuma linha"

            print(f"üìä Sess√£o atual - Intervalo: {self.intervalo_atual} minutos")
            return {
                'fiscal': self.fiscal_atual,
                'data': self.data_atual,
                'linhas': linhas_texto,
                'total_carros': len(registros),
                'intervalo_atual': self.intervalo_atual,
                'intervalos_por_linha': self.intervalos_por_linha,  # üÜï NOVO
                'ativa': True
            }
        except Exception as e:
            print(f"‚ùå Erro ao obter sess√£o atual: {str(e)}")
            return None

    def finalizar_dia(self):
        """Finaliza o dia atual, salvando todos os dados e limpando a sess√£o."""
        if not self.fiscal_atual or not self.data_atual:
            print("‚ùå Nenhuma sess√£o ativa para finalizar!")
            return {
                'status': 'erro',
                'mensagem': 'Nenhuma sess√£o ativa para finalizar!'
            }

        try:
            registros_hoje = self.listar_registros_sessao_atual()
            total_registros = len(registros_hoje)

            dados_finalizados = {
                'fiscal': self.fiscal_atual,
                'data': self.data_atual,
                'total_carros': total_registros,
                'registros': registros_hoje
            }

            # Limpar vari√°veis de sess√£o
            self.fiscal_atual = None
            self.data_atual = None
            self.linha_atual = None  # Sempre None agora
            self.intervalo_atual = 8  # Resetar para padr√£o

            # üÜï NOVO: Resetar intervalos por linha
            self.intervalos_por_linha = {
                'Centro x Vila Verde': 8,
                'Centro x Rasa': 8
            }

            print(f"‚úÖ Dia finalizado com sucesso! {total_registros} carros cadastrados.")

            return {
                'status': 'sucesso',
                'mensagem': f'Dia finalizado! {total_registros} carros foram cadastrados.',
                'dados': dados_finalizados
            }

        except Exception as e:
            print(f"‚ùå Erro ao finalizar dia: {str(e)}")
            return {
                'status': 'erro',
                'mensagem': f'Erro ao finalizar dia: {str(e)}'
            }

    # ========== CONSULTAS E ESTAT√çSTICAS ==========

    def consultar_por_data(self, data_consulta):
        """Consulta todos os registros de uma data espec√≠fica - COM STATUS DE CONFIRMA√á√ÉO."""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            sql = """SELECT * FROM saida_carros 
                     WHERE DATE(data_trabalho) = %s 
                     ORDER BY horario_saida ASC"""

            cursor.execute(sql, (data_consulta,))
            resultado = cursor.fetchall()

            cursor.close()
            conexao.close()

            print(f"üìÖ Consultando data {data_consulta}: {len(resultado)} registros encontrados")
            return resultado

        except Exception as e:
            print(f"‚ùå Erro ao consultar por data: {str(e)}")
            return []

    def consultar_por_filtros(self, filtros):
        """Consulta registros com m√∫ltiplos filtros - COM STATUS DE CONFIRMA√á√ÉO."""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            sql = "SELECT * FROM saida_carros WHERE 1=1"
            valores = []

            if filtros.get('data_especifica'):
                sql += " AND DATE(data_trabalho) = %s"
                valores.append(filtros['data_especifica'])

            if filtros.get('data_inicio'):
                sql += " AND DATE(data_trabalho) >= %s"
                valores.append(filtros['data_inicio'])

            if filtros.get('data_fim'):
                sql += " AND DATE(data_trabalho) <= %s"
                valores.append(filtros['data_fim'])

            if filtros.get('fiscal'):
                sql += " AND nome_fiscal LIKE %s"
                valores.append(f"%{filtros['fiscal']}%")

            if filtros.get('linha'):
                sql += " AND linha LIKE %s"
                valores.append(f"%{filtros['linha']}%")

            if filtros.get('numero_carro'):
                sql += " AND numero_carro LIKE %s"
                valores.append(f"%{filtros['numero_carro']}%")

            if filtros.get('nome_motorista'):
                sql += " AND nome_motorista LIKE %s"
                valores.append(f"%{filtros['nome_motorista']}%")

            sql += " ORDER BY data_trabalho DESC, horario_saida ASC"

            cursor.execute(sql, valores)
            resultado = cursor.fetchall()

            cursor.close()
            conexao.close()

            print(f"üîç Consulta com filtros: {len(resultado)} registros encontrados")
            return resultado

        except Exception as e:
            print(f"‚ùå Erro ao consultar com filtros: {str(e)}")
            return []

    def obter_estatisticas_periodo(self, data_inicio, data_fim):
        """Retorna estat√≠sticas de um per√≠odo espec√≠fico."""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            # Total de carros no per√≠odo
            sql_total = """SELECT COUNT(*) FROM saida_carros 
                          WHERE DATE(data_trabalho) BETWEEN %s AND %s"""
            cursor.execute(sql_total, (data_inicio, data_fim))
            total_carros = cursor.fetchone()[0]

            # Carros por fiscal
            sql_fiscal = """SELECT nome_fiscal, COUNT(*) as total 
                           FROM saida_carros 
                           WHERE DATE(data_trabalho) BETWEEN %s AND %s 
                           GROUP BY nome_fiscal 
                           ORDER BY total DESC"""
            cursor.execute(sql_fiscal, (data_inicio, data_fim))
            por_fiscal = cursor.fetchall()

            # Carros por linha
            sql_linha = """SELECT linha, COUNT(*) as total 
                          FROM saida_carros 
                          WHERE DATE(data_trabalho) BETWEEN %s AND %s 
                          GROUP BY linha 
                          ORDER BY total DESC"""
            cursor.execute(sql_linha, (data_inicio, data_fim))
            por_linha = cursor.fetchall()

            # Carros por dia
            sql_dia = """SELECT DATE(data_trabalho) as data, COUNT(*) as total 
                        FROM saida_carros 
                        WHERE DATE(data_trabalho) BETWEEN %s AND %s 
                        GROUP BY DATE(data_trabalho) 
                        ORDER BY data DESC"""
            cursor.execute(sql_dia, (data_inicio, data_fim))
            por_dia = cursor.fetchall()

            cursor.close()
            conexao.close()

            estatisticas = {
                'periodo': {'inicio': data_inicio, 'fim': data_fim},
                'total_carros': total_carros,
                'por_fiscal': [{'fiscal': row[0], 'total': row[1]} for row in por_fiscal],
                'por_linha': [{'linha': row[0], 'total': row[1]} for row in por_linha],
                'por_dia': [{'data': str(row[0]), 'total': row[1]} for row in por_dia]
            }

            print(f"üìä Estat√≠sticas calculadas para {data_inicio} a {data_fim}")
            return estatisticas

        except Exception as e:
            print(f"‚ùå Erro ao calcular estat√≠sticas: {str(e)}")
            return {}

    # ========== EDI√á√ÉO ==========

    def editar_registros(self, id_registro, nome_fiscal, data_trabalho, linha, numero_carro, nome_motorista,
                         horario_saida):
        """Edita um registro existente (agora com linha por carro)"""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            # Verificar se o registro existe antes de editar
            sql_verificar = "SELECT * FROM saida_carros WHERE id = %s"
            cursor.execute(sql_verificar, (id_registro,))
            registro = cursor.fetchone()

            if not registro:
                print(f"‚ùå Registro com ID {id_registro} n√£o encontrado!")
                cursor.close()
                conexao.close()
                return False

            # Garantir que hor√°rio tenha segundos = 00
            try:
                if isinstance(horario_saida, str):
                    horario_obj = datetime.strptime(horario_saida, '%H:%M').time()
                else:
                    horario_obj = horario_saida

                horario_final = horario_obj.replace(second=0, microsecond=0)
                print(f"üïê Hor√°rio de edi√ß√£o ajustado: {horario_saida} ‚Üí {horario_final}")

            except Exception as e:
                print(f"‚ùå Erro ao processar hor√°rio na edi√ß√£o: {e}")
                horario_final = horario_saida

            sql = """UPDATE saida_carros 
                     SET nome_fiscal = %s, 
                         data_trabalho = %s, 
                         linha = %s, 
                         numero_carro = %s, 
                         nome_motorista = %s, 
                         horario_saida = %s 
                     WHERE id = %s"""

            valores = (nome_fiscal, data_trabalho, linha, numero_carro, nome_motorista, horario_final, id_registro)

            cursor.execute(sql, valores)
            conexao.commit()

            cursor.close()
            conexao.close()

            print(f"‚úÖ Registro {id_registro} editado com sucesso!")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao editar registro: {str(e)}")
            return False

    # ========== UTILIT√ÅRIOS ==========

    def executar_migracao_inicial(self):
        """Execute esta fun√ß√£o UMA VEZ para preparar o banco de dados"""
        print("üîß Executando migra√ß√£o do banco de dados...")
        resultado = self.adicionar_coluna_saida_confirmada()

        if resultado:
            print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
            print("üìù Agora o sistema pode persistir confirma√ß√µes de sa√≠da!")
        else:
            print("‚ùå Erro na migra√ß√£o!")

        return resultado

    def resetar_todas_confirmacoes(self):
        """CORRE√á√ÉO: Reseta todas as confirma√ß√µes para FALSE (todos aguardando)"""
        try:
            conexao = self.connect()
            cursor = conexao.cursor()

            sql = "UPDATE saida_carros SET saida_confirmada = FALSE"
            cursor.execute(sql)
            conexao.commit()

            # Contar quantos foram atualizados
            sql_count = "SELECT COUNT(*) FROM saida_carros"
            cursor.execute(sql_count)
            total = cursor.fetchone()[0]

            cursor.close()
            conexao.close()

            print(f"üîÑ CORRE√á√ÉO: {total} carros agora est√£o como 'AGUARDANDO' (saida_confirmada = FALSE)")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao resetar confirma√ß√µes: {str(e)}")
            return False

    def obter_intervalo_atual(self):
        """Retorna o intervalo atual definido"""
        return self.intervalo_atual


if __name__ == '__main__':
    db = DatabaseManager()
    try:
        conexao = db.connect()
        print("Conex√£o criada com sucesso!")
        conexao.close()

        # DESCOMENTE A LINHA ABAIXO PARA EXECUTAR A MIGRA√á√ÉO UMA VEZ:
        # db.executar_migracao_inicial()

    except Exception as e:
        print(f"Erro na conex√£o: {e}")
